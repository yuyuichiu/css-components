<16> 21/5/2021 - Drink Water
** CSS **
> make height go up
---- Can be achieved through flexbox property!
---- "justify-content: flex-start" (or flex-end) to make child element lays on top/bottom of parent
---- Now, changing the height will expand the element by your 

> Cup shape through border-radius
---- border radius is not limited to one side, 4 points can be specified
---- Order goes clockwise, starts from top-left.

** Javascript **
---- you cannot use .map() on querySelectorAll arrays.

<15> 20/5/2021 - Increment Showcase
** Javascript **
HTML has attribute: data-target
We can extract that in JS by ".getAttribute('data-target')"



<14> 19/5/2021 - Animated Navigation
** CSS **
> shape with lines
---- create a rotatable X shape with two literal lines, instead of "X"
---- then add rotation effect to make it turn from one shape into another



<13> 18/5/2021 - Random Choice Selector
** Javascript **
> add elements
---- 1. create element by "item = document.createElement('div')"
---- 2. Now, you can edit its class and content by classList & innerText
---- 3. Finally, append it to desired location => "target.appendChild(item)"
(This will append as a children of that parent target object)
> time events
---- use setTimeOut and setInterval to engage time event
> event for input update
---- .addEventListener('input', func)


<12> 17/5/2021 - FAQ Collapsibles
** CSS **
> transition for "height: auto"
---- CSS transition does not allow us to animate from height 0px to auto
---- Thus, we can add transition for its margin to make it looks like moving
(adjusting max-height does not work, and scaleY ignores document flow)
> shapes in CSS
---- use ::before and ::after to insert shapes in elements
---- content accepts unicode like "\f007" (can be found on fontawesome.com)
---- Font Awesome icon can be included by "font-family: 'Font Awesome 5 Free';"
(Font Awesome Icon sometimes need to be at font-weight: 900 to work.)

*** Javascript **
> parentNode
---- To assess the parent of element.



<11> 16/5/2021 - Keyboard input getter
** CSS **
> ::selection
---- control text select stylings
---- limit range by .container ::selection {...}

** Javascript **
> get keyboard input with .addEventListener('keydown', function(e) {...} )
---- 'keydown' or 'keyup' both works, 'keypress' is deprecated.



<10> 15/5/2021 - Dad joke API
** Fetch API **
API is a service where the host gives you data based on what you requested
Collect data by using fetch():
> fetch('url' , config).then( ).then( )
---- config => { headers: { 'Accept': 'application/json' } }
---- 1. then(response => response.json() )
---- 2. then(data => { console.log(data) } )
(Data is an object that you can assess with data.key)



<9> 14/5/2021 - Play with HTML Audio Tag
** HTML Audio Tag **
> <audio>
---- does nothing by itself without 'controls' attribute
---- but we can turn it into button and play it with javascript (by _.play())
---- Note that sounds will overlap each other, so cancel sounds by "_.pause()" and "_.currentTime = 0"


<8> 13/5/2021 - Login form with wave Animation
** CSS **
> cubic-bezier
---- An argument in transition, to make animation curve to specify behavior
---- Transition works by moving an object from 1 property to another (silimar to moving location)
---- How it arrive one location is key of animation
---- So, cubic-bezier tells CSS how to move the object as animation
---- cubic-bezier(p0, p1, p2, p3);
(To modify it easier, go to: https://cubic-bezier.com/)

> Input with transparent Background and a line below it
---- clear border & bg, then add 'border-bottom' for the underline
---- To make it change on active, modify it by 'border-bottom-color'

> Pointer event
---- pointer-event: none; => to make object only visible, but not clickable

> Form
---- use container to store a form, instead of using form directly as the body
---- handle label by setting it to position:absolute;
---- :valid to identify when valid input is inserted



<7> 12/5/2021 - Split Landing Page
** CSS **
> Revised how to use flex for dynamic scaling
> :hover == mouseenter & mouseleave in js



<6> 11/5/2021 - Scroll Animation
** CSS **
> nth-child(odd / even)
---- to select odd or even indexed element with that class on it.
** Javascript **
Concept: Scroll position detection
> It requires 2 information
a) The trigger point (fixed)
b) position returned from getBoundingClientRect() (dynamic)
---- Both are numeric, so we just need to compare them on scroll event listener
---- When dynamic < fixed, the element is on screen/criteria.
---- Thus we can add/remove classes to instill scroll-pos-triggered effects



<5> 10/5/2021 - Blur Loading Page Transition
** Javascript **
> Map range of values to another range of values
---- It concept means we can make any value of (0 to 100) into its equivalent value if it is in another range of(1, 0)
---- So 55 in (0,100) will be converted to 0.45 on (1,0)
---- Js does not have built in function for this, so use this one:
```
function scale (number, inMin, inMax, outMin, outMax) {
    return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
``` (src = https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers)
> Change website title
---- document.title = "New Title yay"

** CSS **
> filter: blur(10px)
---- Apply visual effect to pictures, see details on MDN



<4> 9/5/2021 - Search Widget
** Concept **
> To create two-side expand effect, just expand both item. (one by width, another by transform: translate(_); )
** Javascript **
> classList.toggle()
---- easier way to add & remove a class like an on/off button
> myInput.focus()
---- to focus on the input, enable immediate typing.



<3> 7/5/2021 - Rotating Nav Menu
** CSS **
> Dynamic CSS trick
---- if there is an active class that is added by javascript, we can modify other behavior on css instead of in js one by one
---- ".container.active ~ .target" to toggle two states
---- "+" means next siblings && "~" means general siblings
(siblings means two elements are on the same level.)
<< it auto focuses on adjusted items so it fixes some scrolling issues too >>

> A semi-circle on corner of screen
---- Put a circle in a container, and container set to fixed position with -100px on top and left
---- The circle will be partly hidden, making an illusion of a quarter circle.
> Customizing button -- clear out default button properties
---- 1. background: transparent;
---- 2. border: none;
---- 3. button:focus { outline: none; }
> Responsive margin
---- Combine "margin" & "max-width" to ensure minimum margin, without weird display on wide screens.
(Content need to put on separate div for this to work, cannot do this directly to body)



<2> 6/5/2021 - Progress step component
** CSS **
> ::before & ::after
---- as if adding HTML block above/below current element
---- but only does visual appearance, avoid confusing html codes
---- Show its content by "content: '';"
> align-items vs. justify-content
---- align item controls the minor axis, the up and down
---- justify-content controls the major axis, the left and right
> CSS variables
---- :root{ --varName: value; }
---- var name always starts with "--" & stored inside :root{} at top
> Button click effect
---- scale(0.97) [not too stylish, and express the 'clicked' message]
---- set "outline: 0" in :focus for best visuals
> "flex: 1" will disrupt text alignment

** Javascript **
> Turn on disabled by "element.disabled = true/false"



<1> 5/5/2021 - Expanding Cards
** CSS Background **
> background-position: center 
---- keep picture to center of container
> background-size: x, y 
---- control background img

** Javascript **
> querySelector("myclass")
----to select classes similar to getElementsByClassName();
After selected element, we can edit its class by
> classList.add() | .remove()
----edit what class get attached to elements
(Seems like javascript cannot modify class content directly)